AWSTemplateFormatVersion: 2010-09-09
Description: According to the scan result from the scanner, publish the malware information to the target SNS topic.

Parameters:
  Prefix:
    Type: String
    Description: Prefix string for the resources name.
  ScanResultTopicARN:
    Type: String
    Description: The ARN of the scan result SNS topic in storage stack.
  TargetSnsTopicArn:
    Type: String
    Description: The ARN for the SNS topic to which malware information publish. Will create a new SNS Topic if this value is empty.
    Default: ''

Conditions:
  NeedCreateNewSnsTopic: !Equals
    - !Ref TargetSnsTopicArn
    - ''

Resources:
  TargetSnsTopic:
    Type: AWS::SNS::Topic
    Condition: NeedCreateNewSnsTopic
    Properties:
      TopicName: !Join ["-", [!Ref Prefix, !Ref AWS::Region, "malware-plugin"]]
      DisplayName: Malware notification
  PublishMalwarePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Join ["-", [!Ref Prefix, !Ref AWS::Region, "malware-plugin"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sns:Publish
              - account:GetAlternateContact
            Resource: '*'
  PublishMalwareRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref Prefix, !Ref AWS::Region, "malware-plugin"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref PublishMalwarePolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  PublishMalwareLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      FunctionName: !Join ["-", [!Ref Prefix, !Ref AWS::Region, "malware-plugin"]]
      Runtime: python3.8
      Timeout: 500
      Role: !GetAtt
        - PublishMalwareRole
        - Arn
      Environment:
        Variables:
          TARGET_SNS_ARN: !If [NeedCreateNewSnsTopic, !Ref TargetSnsTopic, !Ref TargetSnsTopicArn, ]
      MemorySize: 128
      Code:
        ZipFile: |
          import os
          import json
          from datetime import datetime
          from urllib.parse import urlparse

          import boto3


          def get_bucket_name(file_url):

              url = urlparse(file_url)
              return url.hostname.split('.')[0]


          def get_iso_str(ts):

              dt = datetime.fromtimestamp(ts)
              return dt.isoformat()


          def fetch_account_name():

              account_client = boto3.client('account')
              response = account_client.get_alternate_contact(
                  AlternateContactType='SECURITY'
              )

              return response['AlternateContact']['Name']


          def lambda_handler(event, context):

              target_sns_arn = os.environ['TARGET_SNS_ARN']

              scan_results = []
              account_name = fetch_account_name()

              for record in event['Records']:

                  print('record', record)

                  # Message details from SNS event
                  message = json.loads(record['Sns']['Message'])
                  findings = message['scanning_result'].get('Findings')

                  if not findings:
                      continue

                  finding = findings[0]

                  scan_results.append({
                      'bucket_name': get_bucket_name(message['file_url']),
                      'account_name': account_name,
                      'malware': finding['malware'],
                      'malware_type': finding['type'],
                      'time': get_iso_str(message['timestamp'])
                  })

              print('scan_results', scan_results)

              sns_client = boto3.client('sns')
              request_entries = [
                  {
                      'Message': json.dumps(scan_result),
                      'Id': str(i)
                  }
                  for i, scan_result in enumerate(scan_results)
              ]

              response = sns_client.publish_batch(
                  TopicArn=target_sns_arn,
                  PublishBatchRequestEntries=request_entries,
              )

              print(response)
  TopicSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint: !GetAtt PublishMalwareLambda.Arn
      TopicArn: !Ref ScanResultTopicARN
  InvokedLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PublishMalwareLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref ScanResultTopicARN
