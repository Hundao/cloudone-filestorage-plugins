import os
import json
from datetime import datetime
from urllib.parse import urlparse

import boto3


def get_bucket_name(file_url):

    url = urlparse(file_url)
    return url.hostname.split('.')[0]


def get_iso_str(ts):

    dt = datetime.fromtimestamp(ts)
    return dt.isoformat()


def fetch_account_name():

    account_client = boto3.client('account')
    response = account_client.get_alternate_contact(
        AlternateContactType='SECURITY'
    )

    return response['AlternateContact']['Name']


def lambda_handler(event, context):

    target_sns_arn = os.environ['TARGET_SNS_ARN']

    scan_results = []

    for record in event['Records']:

        print('record', record)

        # Message details from SNS event
        message = json.loads(record['Sns']['Message'])
        findings = message['scanning_result'].get('Findings')

        # ARN info to get AWS Account ID
        # arn = json.dumps(record['EventSubscriptionArn'])
        # account_id = arn.split(":")[4].strip()

        if not findings:
            continue

        finding = findings[0]

        scan_results.append({
            'bucket_name': get_bucket_name(message['file_url']),
            'account_name': fetch_account_name(),
            'malware_type': finding['malware'],
            'type': finding['type'],
            'time': get_iso_str(message['timestamp'])
        })

    print('scan_results', scan_results)

    sns_client = boto3.client('sns')
    request_entries = [
        {
            'Message': json.dumps(scan_result),
            'Id': str(i)
        }
        for i, scan_result in enumerate(scan_results)
    ]

    response = sns_client.publish_batch(
        TopicArn=target_sns_arn,
        PublishBatchRequestEntries=request_entries,
    )

    print(response)
